#!/usr/bin/lua

local function os_capture(cmd)
    local f=assert(io.popen(cmd, 'r'))
    local s=assert(f:read('*a'))
    f:close()
    return string.gsub(s, "\r?\n$", "")
end


------------------------------------------------------------------------------
-- path setup
------------------------------------------------------------------------------
local CCS_ROOT=os.getenv("CCS_ROOT") or ""
local CCS_TARGET=os.getenv("CCS_TARGET")
if not CCS_TARGET then
    print "require CCS_TARGET environment variable"
    os.exit()
end
local CCS_HOST=os.getenv("CCS_HOST")
if not CCS_HOST or CCS_HOST=='' then
    CCS_HOST=os_capture("echo $OSTYPE")
end
if CCS_HOST=="msys" then
    CCS_HOST="i686-pc-msys"
elseif CCS_HOST=="cygwin" then
    CCS_HOST="i686-pc-cygwin"
elseif string.match(CCS_HOST, "linux") then
    CCS_HOST=os_capture("echo $HOSTTYPE").."-linux"
end
local target_map={
    ["i686-pc-msys"]="/usr",
    ["i686-pc-cygwin"]="/usr",
    ["i686-pc-mingw32"]="/i686-pc-mingw32",
    ["x86_64-w64-mingw32"]="/x86_64-w64-mingw32",
}
local CCS_TARGET_ROOT=target_map[CCS_TARGET]
if not CCS_TARGET_ROOT then
    print("NO CCS_TARGET_ROOT for "..CCS_TARGET)
    os.exit()
end
local CCS_DOWNLOAD=os.getenv("CCS_DOWNLOAD") or CCS_ROOT.."/download"


------------------------------------------------------------------------------
-- functions
------------------------------------------------------------------------------
local function extract_cmd(archive, dst)
    if string.match(archive, "\.tar\.gz$") then
        return string.format("tar xzf %s -C %s", archive, dst)
    end
    if string.match(archive, "\.tar\.bz2$") then
        return string.format("tar xjf %s -C %s", archive, dst)
    end
    if string.match(archive, "\.tar\.lzma$") then
        return string.format("tar xJf %s -C %s", archive, dst)
    end
    if string.match(archive, "\.tar\.xz$") then
        return string.format("tar xJf %s -C %s", archive, dst)
    end
    if string.match(archive, "\.zip$") then
        return string.format("unzip -qo -d %s %s ", dst, archive)
    end
end

local function exists(path)
    local ret=os.execute("if [ -e "..path.." ];then true;else false;fi")
    --print(path, ret)
    return ret==0
end

local function basename(path)
    local i=1
    local last_slash=nil
    while i<#path do
        local p=string.find(path, "/", i)
        if not p then
            break
        end
        last_slash=p
        i=p+1
    end
    return string.sub(path, last_slash and last_slash+1 or 1, #path)
end

local function extname(path)
    local i=1
    local last_hyphen=nil
    while i<#path do
        local p=string.find(path, "-", i)
        if not p then
            break
        end
        last_hyphen=p
        i=p+1
    end

    local tail=last_hyphen and string.sub(path, last_hyphen+1, #path) or path
    local p=string.find(tail, "%.")
    if p then
        return string.sub(path, 1, #tail+p-1), string.sub(tail, p+1, #tail)
    else
        return tail
    end
end

local function packageFromUrl(url)
    local archive=basename(url)
    local name, ext=extname(archive)
    local i=1
    local first_hyphen=string.find(name, "-", 1)
    if first_hyphen then
        return {
            url=url,
            name=string.sub(name, 1, first_hyphen-1),
            version=string.sub(name, first_hyphen+1, #archive),
        }
    else
        return {
            url=url,
            name=name,
            version="0",
        }
    end
end

local function execute_script(script, t)
    local tmpfile=os.tmpname()
    --os.execute("touch "..tmpfile)
    local f=assert(io.open(tmpfile, "w"))
    f:write(script)
    f:close()
    local env=""
    if t then
        for k, v in pairs(t) do
            env=env..string.format(' %s="%s"', k, v)
        end
    end
    local cmd=env.." sh "..tmpfile.." "
    print(cmd)
    local result=os.execute(cmd)
    if result>0 then
        print("execute fail")
        os.remove(tmpfile)
        os.exit()
    end
    os.remove(tmpfile)
--[[
    local f=assert(io.popen("sh", 'w'))
    f:write(script)
    f:close()
--]]
--[[
    local cmd="cat << _SH_ | /bin/bash\n"..script.."\n_SH_"
    local result=os.execute(cmd)
    if result>0 then
        print("execute fail")
        print(cmd)
        os.exit()
    end
--]]
end

local function extract(archive, dst)
    os.execute("mkdir -p "..dst)
    local cmd=extract_cmd(archive, dst)
    print(cmd)
    local ret=os.execute(cmd)
    if ret>0 then
        print("error occurs")
        os.exit()
    end
end

local function nil_pack(var, ...)
    if not var then
        return nil
    end
    local t={...}
    table.insert(t, 1, var)
    return t
end

local function map(t, iter, pred)
    local mapped={}
    local f, s, var=iter(t)
    while true do
        local results=nil_pack(f(s, var))
        if not results then
            break
        end
        table.insert(mapped, pred(unpack(results)))
        var=results[1]
    end
    return mapped
end

local function filter(self, f)
    local t={}
    for i, v in ipairs(self) do
        if f(v) then
            table.insert(t, v)
        end
    end
    return t
end

local function set(...)
    local set={}
    for i, v in pairs({...}) do
        set[v]=true
    end
    return set
end

local function dir_walk(path, f)
    if lfs.attributes(path, "mode") == "directory" then
        for file in lfs.dir(path) do
            if file=="." or file==".." then
                -- skip
            else
                dir_walk(path .. "/" .. file, f)
            end
        end
    else
        f(path)
    end
end

local function get_pair(t, index)
    local pair={}
    local exist=false
    for i, v in ipairs(t) do
        local e=v[index]
        if e then
            exist=true
        end
        table.insert(pair, e)
    end
    if exist then
        return pair
    end
end

local function zip(...)
    local tables={...}
    local i=1

    return coroutine.wrap(function()
        while true do
            local pair=get_pair(tables, i)
            if not pair then
                break
            end
            coroutine.yield(unpack(pair))
            i=i+1
        end
    end)
end


------------------------------------------------------------------------------
-- newClass
------------------------------------------------------------------------------
function newClass(className, constructor, superClass)
    local class={
        name=className,
    }
    class.get_class=function() return class end
    local metaclass={ 
        __call=function(_, ...)
            local instance={}
            setmetatable(instance, {
                __index=class,
                __eq=class.eq,
                __lt=class.lt,
                __tostring=class.to_s,
            })
            constructor(instance, unpack{...})
            return instance;
        end
    }
    if superClass then
        metaclass.__index=superClass
    end
    setmetatable(class, metaclass)
    return class
end


------------------------------------------------------------------------------
-- Package
------------------------------------------------------------------------------
local Package=newClass("Package", function(self, t)
    for k, v in pairs(t) do
        self[k]=v
    end
end)

function Package:to_s()
    local s
    if self.dir=='' then
        s="["..self.host.."]"..self.name
    else
        s="["..self.host.."]"..self.dir..'/'..self.name
    end
    if self.version then
        s=s.."-"..self.version
    end
    return s
end

function Package:eq(rhs)
    return self.dir==self.dir and self.name==rhs.name and self.host==rhs.host and self.target==rhs.target
end

function Package:lt(rhs)
    local l_version={}
    if self.version then
        for m in string.gmatch(self.version, "%d+") do
            table.insert(l_version, 0+m)
        end
    end
    local r_version={}
    if rhs.version then
        for m in string.gmatch(rhs.version, "%d+") do
            table.insert(r_version, 0+m)
        end
    end
    local iter=zip(l_version, r_version) 
    while true do
        local l, r=iter()
        if not l then
            break
        end
        --print("LR", l, r)
        l=l or 0
        r=r or 0
        if l<r then
            return true
        elseif l>r then
            return false
        end
    end
    --[[
    if self.release<r.release then
        return true
    end
    --]]
    return false
end

function Package:getHost()
    if self.host=="src" then
        return CCS_TARGET
    else
        return self.host
    end
end

function Package:getTargetRoot()
    if self.dir=='' then
        return CCS_TARGET_ROOT
    else
        return CCS_TARGET_ROOT..'/'..self.dir
    end
end

function Package:getRegisterFile()
    return self:getTargetRoot().."/installed/"..self.name
end

function Package:isInstalled()
    return exists(self:getRegisterFile())
end

function Package:register()
    local status_file=self:getRegisterFile()
    --print("register: "..status_file)

    local mkdir_cmd="mkdir -p `dirname "..status_file.."%s`"
    local ret=os.execute(mkdir_cmd)
    if ret>0 then
        print("error occurs")
        os.exit()
    end

    local f=io.open(status_file, "w")
    if not f then
        print("io.open() fail: ", status_file)
        os.exit()
    end
    f:write("package{\n");
    for k, v in pairs(self) do
        if type(v)=="string" then
            f:write(string.format("%s='%s',\n", k, v))
        end
    end
    f:write("}")

    f:close()
end

function Package:download(on_download)
    assert(type(self.url=="table"))
    if self.url then
        for i, url in ipairs(self.url) do
            if url:find("^https?:") or url:find("^ftp:") then
                -- download
                local archive=self.archive
                if not archive then
                    archive=assert(string.match(url, "/([^/]+)$"))
                end
                local cmd=string.format("(mkdir -p "..CCS_DOWNLOAD.."; cd "..CCS_DOWNLOAD.."; if [ ! -e %s ];then wget --no-check-certificate -O '%s' '%s';fi)",
                archive, archive, url)
                --print(cmd)
                local ret=os.execute(cmd)
                if ret>0 then
                    print("error occurs")
                    os.exit()
                end

                -- extract
                if on_download then
                    on_download(archive)
                end
            end
        end
    elseif self.svn then
        local cmd=string.format("(cd "..CCS_ROOT.."/src; svn co "..self.svn[1].." "..self.svn[2]..")")
        local ret=os.execute(cmd)
        if ret>0 then
            print("error occurs")
            os.exit()
        end
    end
end


------------------------------------------------------------------------------
-- BinaryPackage
------------------------------------------------------------------------------
local BinaryPackage=newClass("BinaryPackage", function(self, t)
    for k, v in pairs(t) do
        self[k]=v
    end
end, Package)

function BinaryPackage:eq(rhs)
    return self.name==rhs.name and self.host==rhs.target
end

function BinaryPackage:install()
    self:download(function(archive)
        extract(CCS_DOWNLOAD.."/"..archive, self:getTargetRoot())
    end)
    print(string.format("\n %s installed !!\n", self.name))
end


------------------------------------------------------------------------------
-- ToolchainPackage
------------------------------------------------------------------------------
local ToolchainPackage=newClass("ToolchainPackage", function(self, t)
    for k, v in pairs(t) do
        self[k]=v
    end
end, Package)

function ToolchainPackage:to_s()
    local s="[->"..self.target.."]"..self.name
    if self.version then
        s=s.."-"..self.version
    end
    return s
end

function ToolchainPackage:isInstalled()
    return false
end

function ToolchainPackage:install()
    self:download(function(archive)
        extract(CCS_DOWNLOAD.."/"..archive, self:getTargetRoot())
    end)
    print(string.format("\n %s installed !!\n", self.name))
end

function ToolchainPackage:eq(rhs)
    return self.name==rhs.name and self.target==rhs.target
end


------------------------------------------------------------------------------
-- GroupPackage
------------------------------------------------------------------------------
local GroupPackage=newClass("GroupPackage", function(self, t)
    for k, v in pairs(t) do
        self[k]=v
    end
end, Package)

function GroupPackage:eq(rhs)
    return self.name==rhs.name
end

function GroupPackage:to_s()
    return self.name.."("..table.concat(
    map(self.depends, ipairs, function(i, e)
        if type(e)=="table" then
            return e[1]
        else
            return e
        end
    end), "|")..")"
end

function GroupPackage:install()
    -- do nothing
end


------------------------------------------------------------------------------
-- SrcPackage
------------------------------------------------------------------------------
local SrcPackage=newClass("SrcPackage", function(self, t)
    for k, v in pairs(t) do
        self[k]=v
    end
    self.host="src"
end, Package)

function SrcPackage:eq(rhs)
    return self.dir==self.dir and self.name==rhs.name
end

function SrcPackage:to_s()
    if self.dir=='' then
        return "*"..self.name.."-"..self.version.."*"
    else
        return "*"..self.dir..'/'..self.name.."-"..self.version.."*"
    end
end

function SrcPackage:getRegisterFile()
    return self:getTargetRoot().."/installed/"..self.name
end

function SrcPackage:install()
    self:download()

    if CCS_TARGET=="i686-pc-mingw32" then
        if os.execute("if [ `gcc -dumpmachine | perl -pe 's/\\s//g'` = mingw32 ];then true; else false; fi")~=0 then
            print("no compiler for "..CCS_TARGET)
            os.exit()
        end
    else
        if os.execute("if [ `gcc -dumpmachine | perl -pe 's/\\s//g'` = "..CCS_TARGET .." ];then true; else false; fi")~=0 then
            print("no compiler for "..CCS_TARGET)
            os.exit()
        end
    end

    local script=self.sh
    local target_key="sh_"..CCS_TARGET
    if self[target_key] then
        script=self[target_key]
    end
    os.execute("mkdir -p "..self:getTargetRoot())
    execute_script(script, {
        CCS_HOST=CCS_HOST,
        CCS_TARGET_ROOT=self:getTargetRoot(),
        LDFLAGS=string.format("-L%s/local/lib -L%s/lib", CCS_TARGET_ROOT, self:getTargetRoot()),
        CFLAGS=string.format("-I%s/local/include -I%s/include", CCS_TARGET_ROOT, self:getTargetRoot()),
        CXXFLAGS=string.format("-I%s/local/include -I%s/include", CCS_TARGET_ROOT, self:getTargetRoot()),
        PKG_CONFIG_PATH=string.format("%s/local/lib/pkgconfig:%s/lib/pkgconfig", CCS_TARGET_ROOT, self:getTargetRoot()),
        CCS_DOWNLOAD=CCS_DOWNLOAD,
        CCS_URL=self.url[1],
        CCS_SELF_DIR=CCS_ROOT..'/package/'..self.dir,
        CCS_FILE=self.file,
    })
end


------------------------------------------------------------------------------
-- EmptyPackage
------------------------------------------------------------------------------
local EmptyPackage=newClass("EmptyPackage", function(self, t)
    for k, v in pairs(t) do
        self[k]=v
    end
end, Package)

function EmptyPackage:to_s()
    return "[not found]"..self.name
end

function EmptyPackage:install()
end


------------------------------------------------------------------------------
-- loadPackage env
------------------------------------------------------------------------------
local function loadPackage(file)
    local packages={}
    local env={
    }
    setmetatable(env, {
        __index={
            binaryPackage=function(t)
                table.insert(packages, BinaryPackage(t))
            end,
            groupPackage=function(t)
                table.insert(packages, GroupPackage(t))
            end,
            srcPackage=function(t)
                table.insert(packages, SrcPackage(t))
            end,
            toolchainPackage=function(t)
                table.insert(packages, ToolchainPackage(t))
            end,
        }
    })
    local chunk=assert(loadfile(file))
    setfenv(chunk, env)
    chunk()
    for i, v in ipairs(packages) do
        v.file=file
        v.dir=file:gsub('^'..CCS_ROOT..'/package/', ''):gsub('/?[^/]+$', '')
    end
    return packages
end


------------------------------------------------------------------------------
-- Node
-- dependency tree
------------------------------------------------------------------------------
local Node=newClass("Node", function(self, t)
    self.package=t
    self.children={}
end)

function Node:add_child(child)
    table.insert(self.children, child)
end

function Node:show()
    print(self.package.name)
    for i, v in ipairs(self.children) do
        print(v:to_s())
    end
end

function Node:to_queue()
    local queue={}
    self:enqueue_(queue)
    return queue
end

function Node:enqueue_(queue)
    table.insert(queue, 1, self.package)
    for i, v in ipairs(self.children) do
        v:enqueue_(queue)
    end
end


------------------------------------------------------------------------------
-- Manager
------------------------------------------------------------------------------
local Manager=newClass("Manager", function(self)
    self.package_count=0
    -- load packages
    self.packages={}
    dir_walk(CCS_ROOT..'/package', function(f)
        if f:match("%.lua$") then
            for i, v in ipairs(loadPackage(f)) do
                if self:is_valid(v) then
                    if not self.packages[v.name] then
                        self.packages[v.name]={}
                    end
                    self.package_count=self.package_count+1
                    table.insert(self.packages[v.name], v)
                end
            end
        end
    end)
    print("HOST to TARGET:", CCS_HOST.." to "..CCS_TARGET)
    print()
end)

function Manager:usage()
    local hosts={}

    return string.format([=[
usage: ccs {list|install|toolchain} [args...]

list : display installed packages.
toolchain : install compile toolchain.
install {package}: install a package. 

CCS_ROOT: %s (%d packages)
CCS_TARGET_ROOT: %s
CCS_DOWNLOAD: %s
    ]=], 
    CCS_ROOT, self.package_count,
    CCS_TARGET_ROOT, 
    CCS_DOWNLOAD)
end

-- target package is valid in current environment.
function Manager:is_valid(package)
    if package.host==CCS_TARGET then
        return true
    end
    if package.target==CCS_TARGET then
        return true
    end
    if package:get_class()==SrcPackage then
        return true
    end
end

function Manager:show_list()
    local keys=map(self.packages, pairs, function(k, v)
        return k
    end)
    table.sort(keys, function(a, b)
        return a<b
    end)
    for i, k in ipairs(keys) do
        local v=self.packages[k]
        local p=Package {
            name=name,
            host=CCS_HOST,
            target=CCS_TARGET,
        }
        local line=table.concat(map(filter(v, function(e)
            return e:get_class()==SrcPackage or e.target==host or e.host==host
            --return e==p
        end
        ), ipairs, function(i, e) 
            return e:to_s() 
        end), ", ")
        if line~="" then
            print(string.format("[%d]%s", i, line))
        end
    end
end

function Manager:find(name, dir)
    dir=dir or 'local'
    return self:find_package(
    Package{
        name=name,
        dir=dir,
        host=CCS_HOST,
        target=CCS_TARGET,
    }) or self:find_package(
    Package{
        name=name,
        dir=dir,
        host=CCS_TARGET,
    }) or self:find_package(
    Package{
        name=name,
        dir=dir,
        host=CCS_HOST,
    }) or self:find_package(
    Package{
        name=name,
        dir='local',
        host=CCS_HOST,
    })
end

function Manager:find_package(p)
    --print("find_package:", p:to_s())
    local founds=self.packages[p.name] or {}
    --[[
    local founds={}
    local packages=self.packages[p.name]
    if packages then
        for i, v in ipairs(packages) do
            class=v:get_class()
            --if class==SrcPackage or v==p then
            if class==SrcPackage then
                if v.dir==p.dir then
                    table.insert(founds, v)
                end
            elseif v:eq(p) then
                table.insert(founds, v)
            end
        end
    end
    --]]
    if #founds>0 then
        if #founds>1 then
            table.sort(founds, function(a, b)
                return a<b
            end)
        end
        return founds[#founds]
    end
end

function Manager:install(name, dir)
    local t=self:find(name, dir)
    if not t then
        print("not found", name)
        os.exit()
    end
    -- dependency
    print("resolve dependency...")
    root=Node(t)
    self:resolve_dependencies(root, dir)
    --root:show()

    -- create install queue
    local queue=root:to_queue()
    print(string.format("## install queue %d ##", #queue))
    local notFound=false
    for i, v in ipairs(queue) do
        print(v:to_s())
        if v:get_class()==EmptyPackage then
            notFound=true
        end
    end
    print(string.format("## install queue %d ##", #queue))

    if notFound then
        print("not exist package")
        os.exit()
    end
    print()
    for i, v in ipairs(queue) do
        print(v:to_s())
        if v:isInstalled() then
            print("installed:", v:getRegisterFile())
        else
            v:install()
            if v.post then
                execute_script(v.post, {
                    CCS_HOST=CCS_HOST,
                    CCS_TARGET_ROOT=v:getTargetRoot(),
                    LDFLAGS=string.format("-L%s/local/lib -L%s/lib", CCS_TARGET_ROOT, v:getTargetRoot()),
                    CFLAGS=string.format("-I%s/local/include -I%s/include", CCS_TARGET_ROOT, v:getTargetRoot()),
                    CXXFLAGS=string.format("-I%s/local/include -I%s/include", CCS_TARGET_ROOT, v:getTargetRoot()),
                    CCS_DOWNLOAD=CCS_DOWNLOAD,
                    CCS_FILE=v.file,
                })
            end
            v:register()
        end
    end
end

function Manager:resolve_dependencies(node, dir)
    local p=node.package
    local depends=p["depends_"..CCS_TARGET] or p.depends
    if depends then
        for i, v in ipairs(depends) do
            local name=nil
            if type(v)=="string" then
                name=v
            elseif type(v)=="table" then
                if #v==3 then
                    name=v[1]
                elseif #v==2 then
                    name=v[1]
                end
            end
            print(node.package:to_s())
            local p=self:find(name, dir)
            local child=nil
            if p then
                child=Node(p)
                self:resolve_dependencies(child, dir)
            else
                child=Node(EmptyPackage{name=name})
            end
            node:add_child(child)
        end
    end
end


------------------------------------------------------------------------------
-- main
------------------------------------------------------------------------------
print("Cross Compile Script")
print()

local manager=Manager()

if #arg==0 then
    print(manager:usage())
    os.exit()
end

local cmd=table.remove(arg, 1)


if cmd=="list" then
    manager:show_list()

elseif cmd=="install" then
    if #arg==0 then
        print "no target"
        os.exit()
    end
    for i, v in ipairs(arg) do
        local dir=v:match("^(.*)/")
        if dir then
            local name=v:match("([^/]+)$")
            manager:install(name, dir)
        else
            manager:install(v)
        end
    end

elseif cmd=="toolchain" then
    manager:toolchain()

elseif cmd=="create" then
    local p=packageFromUrl(arg[1])
    local path=CCS_ROOT.."/"..p.name..".lua"
    print("create:", path)
    if not exists(path) then
        local f=io.open(path, "w")
        f:write('srcPackage {\n')
        f:write('    name="'..p.name..'",\n')
        f:write('    version="'..p.version..'",\n')
        f:write('    host="'..CCS_HOST..'",\n')
        f:write('    url={\n')
        f:write('        "'..p.url..'"\n')
        f:write('    },\n')
        f:write(string.format([==[ 
    sh=[=[
set -x
mkdir -p $CCS_TARGET_ROOT/src
cd $CCS_TARGET_ROOT
archive=%s
archive_dir=`extract $CCS_DOWNLOAD/$archive src`
cd src/$archive_dir
./configure --host=$CCS_TARGET --prefix=$CCS_TARGET_ROOT || exit 1
make -j4 || exit 1
make install
    ]=],
]==], basename(arg[1])))
        f:write('}\n')
        f:close()
    end

else
    print("unknown cmd:", cmd)
end

print()

